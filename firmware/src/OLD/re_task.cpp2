#include "re_task.h"
#include "semaphore_guard.h"

RETask::RETask(const uint8_t task_core) : Task{"Display", 4048, 1, task_core} {
  knob_state_queue_ = xQueueCreate(1, sizeof(KnobState));
  assert(knob_state_queue_ != NULL);

  //mutex_ = xSemaphoreCreateMutex();
  //assert(mutex_ != NULL);
}

RETask::~RETask() {
  vQueueDelete(knob_state_queue_);
  //vSemaphoreDelete(mutex_);
}

void RETask::run() {
    
    KnobState state;

    while (1) {
        if (xQueueReceive(knob_state_queue_, &state, portMAX_DELAY) == pdFALSE) {
          Serial.println("Not working?");
          continue;
        }

        /* Fill the background - Don't need
        spr_.fillSprite(TFT_BLACK);
        if (state.config.num_positions > 1) {
          int32_t height = state.current_position * TFT_HEIGHT / (state.config.num_positions - 1);
          spr_.fillRect(0, TFT_HEIGHT - height, TFT_WIDTH, height, FILL_COLOR);
        }
        */

        Serial.print(state.current_position);
        Serial.print(", ");
        /* Draw the current_position and config.descriptor
        spr_.drawString(String() + state.current_position, TFT_WIDTH / 2, TFT_HEIGHT / 2 - VALUE_OFFSET, 1);
        spr_.setFreeFont(&DESCRIPTION_FONT);
        int32_t line_y = TFT_HEIGHT / 2 + DESCRIPTION_Y_OFFSET;
        char* start = state.config.descriptor;
        char* end = start + strlen(state.config.descriptor);
        while (start < end) {
          char* newline = strchr(start, '\n');
          if (newline == nullptr) {
            newline = end;
          }
          
          char buf[sizeof(state.config.descriptor)] = {};
          strncat(buf, start, min(sizeof(buf) - 1, (size_t)(newline - start)));
          spr_.drawString(String(buf), TFT_WIDTH / 2, line_y, 1);
          start = newline + 1;
          line_y += spr_.fontHeight(1);
        }
        */

        float left_bound = PI / 2;
        
        /* Draw the arc and lines that show the bounds
        if (state.config.num_positions > 0) {
          float range_radians = (state.config.num_positions - 1) * state.config.position_width_radians;
          left_bound = PI / 2 + range_radians / 2;
          float right_bound = PI / 2 - range_radians / 2;
          spr_.drawLine(TFT_WIDTH/2 + RADIUS * cosf(left_bound), TFT_HEIGHT/2 - RADIUS * sinf(left_bound), TFT_WIDTH/2 + (RADIUS - 10) * cosf(left_bound), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(left_bound), TFT_WHITE);
          spr_.drawLine(TFT_WIDTH/2 + RADIUS * cosf(right_bound), TFT_HEIGHT/2 - RADIUS * sinf(right_bound), TFT_WIDTH/2 + (RADIUS - 10) * cosf(right_bound), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(right_bound), TFT_WHITE);
        }
        if (DRAW_ARC) {
          spr_.drawCircle(TFT_WIDTH/2, TFT_HEIGHT/2, RADIUS, TFT_DARKGREY);
        }
        */

        float adjusted_sub_position = state.sub_position_unit * state.config.position_width_radians;
        if (state.config.num_positions > 0) {
          if (state.current_position == 0 && state.sub_position_unit < 0) {
            adjusted_sub_position = -logf(1 - state.sub_position_unit  * state.config.position_width_radians / 5 / PI * 180) * 5 * PI / 180;
          } else if (state.current_position == state.config.num_positions - 1 && state.sub_position_unit > 0) {
            adjusted_sub_position = logf(1 + state.sub_position_unit  * state.config.position_width_radians / 5 / PI * 180)  * 5 * PI / 180;
          }
        }

        float raw_angle = left_bound - state.current_position * state.config.position_width_radians;
        float adjusted_angle = raw_angle - adjusted_sub_position;
        Serial.println(adjusted_angle);

        /* Draw the circle that represents the current position 
        if (state.config.num_positions > 0 && ((state.current_position == 0 && state.sub_position_unit < 0) || (state.current_position == state.config.num_positions - 1 && state.sub_position_unit > 0))) {

          spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(raw_angle), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(raw_angle), 5, DOT_COLOR);
          if (raw_angle < adjusted_angle) {
            for (float r = raw_angle; r <= adjusted_angle; r += 2 * PI / 180) {
              spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(r), 2, DOT_COLOR);
            }
            spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(adjusted_angle), 2, DOT_COLOR);
          } else {
            for (float r = raw_angle; r >= adjusted_angle; r -= 2 * PI / 180) {
              spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(r), 2, DOT_COLOR);
            }
            spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(adjusted_angle), 2, DOT_COLOR);
          }
        } else {
          spr_.fillCircle(TFT_WIDTH/2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT/2 - (RADIUS - 10) * sinf(adjusted_angle), 5, DOT_COLOR);
        }
        */

        // What's this???
        //spr_.pushSprite(0, 0);

        //SemaphoreGuard lock(mutex_);

        /* Brightness stuff we don't need
        {
          SemaphoreGuard lock(mutex_);
          ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, brightness_);
        }
        */

        delay(2);
    }
}

QueueHandle_t RETask::getKnobStateQueue() {
  return knob_state_queue_;
}